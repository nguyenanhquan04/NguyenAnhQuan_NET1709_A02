@page "/staff/updateprofile"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject ISystemAccountRepository AccountRepository
@rendermode InteractiveServer

@if (IsAuthorized)
{
    <div class="container mt-4">
        <h2>Update Profile</h2>

        <!-- Display Current Account Info -->
        <div class="card mb-4">
            <div class="card-header bg-info text-white">Current Account Information</div>
            <div class="card-body">
                <p><strong>Name:</strong> @CurrentAccountName</p>
                <p><strong>Email:</strong> @CurrentAccountEmail</p>
            </div>
        </div>

        <!-- Update Form -->
        <EditForm Model="this" OnValidSubmit="UpdateProfileHandle" FormName="UpdateProfileForm">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">New Account Name</label>
                <InputText class="form-control" @bind-Value="AccountName" />
            </div>

            <div class="mb-3">
                <label class="form-label">New Account Email</label>
                <InputText class="form-control" @bind-Value="AccountEmail" />
            </div>

            <div class="mb-3">
                <label class="form-label">New Password</label>
                <InputText type="password" class="form-control" @bind-Value="AccountPassword" />
            </div>

            <button type="submit" class="btn btn-primary">Update</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="NavigateBack">Back</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-3">@ErrorMessage</div>
        }
    </div>
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />

@code {
    private bool IsAuthorized = false;
    private short AccountId;
    private string CurrentAccountName;  // Stores existing name
    private string CurrentAccountEmail; // Stores existing email
    private string AccountName;
    private string AccountEmail;
    private string AccountPassword;
    private string ErrorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var accountRole = await SessionStorage.GetItemAsync<int?>("AccountRole");
            if (accountRole != 1)
            {
                Navigation.NavigateTo("/error");
            }
            else
            {
                IsAuthorized = true;
                await LoadProfile();
                StateHasChanged();
            }
        }
    }

    private async Task LoadProfile()
    {
        var accountId = await SessionStorage.GetItemAsync<int?>("AccountId");
        if (accountId.HasValue)
        {
            AccountId = (short)accountId.Value;
            var account = await AccountRepository.GetAccountById(AccountId);
            if (account != null)
            {
                CurrentAccountName = account.AccountName; // Set current values
                CurrentAccountEmail = account.AccountEmail;
                AccountName = account.AccountName; // Pre-fill the form with existing values
                AccountEmail = account.AccountEmail;
            }
            else
            {
                ErrorMessage = "Account not found.";
            }
        }
        else
        {
            ErrorMessage = "Account ID is missing or invalid.";
        }
    }

    private async Task UpdateProfileHandle()
    {
        var account = await AccountRepository.GetAccountById(AccountId);
        if (account == null)
        {
            ErrorMessage = "Account not found.";
            return;
        }

        account.AccountName = AccountName;
        account.AccountEmail = AccountEmail;
        account.AccountPassword = AccountPassword;

        var result = await AccountRepository.UpdateProfileAsync(account);
        if (result)
        {
            Navigation.NavigateTo("/staff");
        }
        else
        {
            ErrorMessage = "Failed to update profile. Please try again.";
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/staff");
    }
}
