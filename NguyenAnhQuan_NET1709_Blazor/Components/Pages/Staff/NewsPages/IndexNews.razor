@page "/staff/newsarticles"
@inject NavigationManager Navigation
@inject INewsArticleRepository NewsRepo
@inject ITagRepository TagRepo
@inject ISystemAccountRepository AccountRepo
@inject ISessionStorageService SessionStorage
@rendermode InteractiveServer
<h1>News Articles</h1>

<!-- Search Bar -->
<div class="mb-3">
    <input type="text" @bind="SearchTerm" class="form-control" placeholder="Search by title or headline" />
    <button class="btn btn-primary mt-2" @onclick="SearchArticles">Search</button>
</div>

<div class="mb-3">
    <button class="btn btn-success" @onclick="GoToCreate">Create New Article</button>
</div>

<!-- Articles Table -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Title</th>
            <th>Headline</th>
            <th>Created Date</th>
            <th>Created By</th>
            <th>Modified Date</th>
            <th>Updated By</th>
            <th>Category Name</th>
            <th>News Status</th>
            <th>News Source</th>
            <th>News Content</th>
            <th>Tags</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (NewsArticles != null)
        {
            @foreach (var article in NewsArticles)
            {
                <tr>
                    <td>@article.NewsArticleId</td>
                    <td>@article.NewsTitle</td>
                    <td>@article.Headline</td>
                    <td>@(article.CreatedDate?.ToString("yyyy-MM-dd"))</td>
                    <td>@(article.CreatedBy?.AccountName ?? "Unknown")</td>
                    <td>@(article.ModifiedDate?.ToString("yyyy-MM-dd"))</td>
                    <td>@(UpdatedByNames.ContainsKey(article.UpdatedById ?? 0) ? UpdatedByNames[article.UpdatedById.Value] : "Unknown")</td>
                    <td>@(article.Category?.CategoryName ?? "N/A")</td>
                    <td>@(article.NewsStatus.HasValue ? (article.NewsStatus.Value ? "Active" : "Inactive") : "Unknown")</td>
                    <td>@article.NewsSource</td>
                    <td>@article.NewsContent</td>
                    <td>
                        @if (article.Tags.Any())
                        {
                            @foreach (var tag in article.Tags)
                            {
                                <span class="badge bg-primary">@tag.TagName</span>
                            }
                        }
                        else
                        {
                            <span class="text-muted">No tags available</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => GoToEdit(article.NewsArticleId)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(article.NewsArticleId)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="12" class="text-center">Loading...</td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination">
    <button class="btn btn-outline-primary" @onclick="() => LoadPage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
        Previous
    </button>
    @for (int i = 1; i <= TotalPages; i++)
    {
        <button class="btn btn-outline-primary @(i == CurrentPage ? "active" : "")" @onclick="() => LoadPage(i)">
            @i
        </button>
    }
    <button class="btn btn-outline-primary" @onclick="() => LoadPage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
        Next
    </button>
</div>
@if (ShowDeleteConfirmation)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this article?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteArticle">Delete</button>
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
@code {
    private List<NewsArticle> NewsArticles = new();
    private Dictionary<short, string> UpdatedByNames = new();
    private string SearchTerm = string.Empty;
    private int TotalPages = 1;
    private int CurrentPage = 1;
    private const int PageSize = 10;
    private bool ShowDeleteConfirmation = false;
    private string ArticleToDelete;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var accountRole = await SessionStorage.GetItemAsync<int?>("AccountRole");
        if (accountRole != 1)
        {
            Navigation.NavigateTo("/Error");
            return;
        }
        if (firstRender)
        {
            await LoadNewsArticles();
            StateHasChanged();
        }
    }
    private async Task Logout()
    {
        await SessionStorage.RemoveItemAsync("AccountId");
        await SessionStorage.RemoveItemAsync("AccountEmail");
        await SessionStorage.RemoveItemAsync("AccountRole");

        Navigation.NavigateTo("/login", forceLoad: true);
    }
    private void NavigateBack()
    {
        Navigation.NavigateTo("/staff");
    }
    private async Task LoadNewsArticles()
    {
        var result = await NewsRepo.GetAllNewsArticlesAsync(CurrentPage, PageSize);
        NewsArticles = result.Articles;
        TotalPages = result.TotalPages;

        foreach (var article in NewsArticles)
        {
            article.Tags = await TagRepo.GetTagsByNewsArticleIdAsync(article.NewsArticleId);
        }

        var updatedByIds = NewsArticles
            .Where(a => a.UpdatedById.HasValue)
            .Select(a => a.UpdatedById.Value)
            .Distinct()
            .ToList();

        foreach (var id in updatedByIds)
        {
            var account = await AccountRepo.GetAccountById(id);
            UpdatedByNames[id] = account?.AccountName ?? "Unknown";
        }
    }

    private async Task SearchArticles()
    {
        var result = await NewsRepo.SearchNewsArticlesAsync(SearchTerm, CurrentPage, PageSize);
        NewsArticles = result.Articles;
        TotalPages = result.TotalPages;
    }

    private async Task LoadPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > TotalPages || pageNumber == CurrentPage)
            return;

        CurrentPage = pageNumber;
        await LoadNewsArticles();
    }

    private void GoToEdit(string articleId) => Navigation.NavigateTo($"/staff/newsarticles/edit/{articleId}");
    private void GoToCreate() => Navigation.NavigateTo("/staff/newsarticles/create");

    private void ConfirmDelete(string articleId)
    {
        ArticleToDelete = articleId;
        ShowDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        ShowDeleteConfirmation = false;
        ArticleToDelete = null;
    }

    private async Task DeleteArticle()
    {
        if (!string.IsNullOrEmpty(ArticleToDelete))
        {
            await NewsRepo.DeleteNewsArticleAsync(ArticleToDelete);
            ShowDeleteConfirmation = false;
            await LoadNewsArticles();
        }
    }
}
