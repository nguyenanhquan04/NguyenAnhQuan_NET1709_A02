@page "/staff/newsarticles/create"
@inject NavigationManager Navigation
@inject INewsArticleRepository NewsRepo
@inject ITagRepository TagRepo
@inject ICategoryRepository CategoryRepo
@inject ISessionStorageService SessionStorage
@inject IJSRuntime JS
@rendermode InteractiveServer

<h1>Create News Article</h1>

@if (!IsAuthorized)
{
    <p class="text-danger">You are not authorized to create news articles.</p>
}
else
{
    <EditForm Model="@NewsArticle" OnValidSubmit="OnSubmit" FormName="CreateForm">
        <DataAnnotationsValidator />

        <!-- ID Input -->
        <div class="mb-3">
            <label for="newsId" class="form-label">News Article ID</label>
            <InputText id="newsId" class="form-control" @bind-Value="NewsArticle.NewsArticleId" />
        </div>

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="NewsArticle.NewsTitle" />
        </div>

        <div class="mb-3">
            <label for="headline" class="form-label">Headline</label>
            <InputText id="headline" class="form-control" @bind-Value="NewsArticle.Headline" />
        </div>

        <div class="mb-3">
            <label for="content" class="form-label">Content</label>
            <InputTextArea id="content" class="form-control" @bind-Value="NewsArticle.NewsContent" />
        </div>
        <div class="mb-3">
            <label for="content" class="form-label">NewsSource</label>
            <InputTextArea id="content" class="form-control" @bind-Value="NewsArticle.NewsSource" />
        </div>
        <div class="mb-3">
            <label class="form-label">Category</label>
            <select class="form-select" @bind="SelectedCategoryId">
                <option value="">Select a Category</option>
                @foreach (var category in CategoryList)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </select>

        </div>

        <div class="mb-3">
            <label class="form-label">Tags</label><br />
            @foreach (var tag in TagList)
            {
                <label class="me-2">
                    <input type="checkbox" value="@tag.TagId" checked="@SelectedTagIds.Contains(tag.TagId)"
                           @onchange="(e) => ToggleTagSelection(tag.TagId, e.Value as bool?)" />
                    @tag.TagName
                </label>
            }
        </div>

        <button type="submit" class="btn btn-primary">Create</button>
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
    </EditForm>
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    function confirmCreate() {
        return confirm("Are you sure you want to create this news article?");
    }
</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />

@code {
    private NewsArticle NewsArticle { get; set; } = new();
    private short? SelectedCategoryId { get; set; }

    private List<Tag> TagList = new();
    private List<Category> CategoryList = new();
    private List<int> SelectedTagIds = new();
    private bool IsAuthorized = false;
    private bool _isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _isInitialized = true; 

            var accountRole = await SessionStorage.GetItemAsync<int?>("AccountRole");
            IsAuthorized = accountRole == 1;

            if (!IsAuthorized)
            {
                Navigation.NavigateTo("/Error", forceLoad: true);
                return;
            }

            await LoadCategoriesAndTags();
            StateHasChanged(); // Ensure UI updates after loading data
        }
    }

    private async Task LoadCategoriesAndTags()
    {
        CategoryList = await CategoryRepo.GetCategoriesNoPagiAsync();
        
        if (CategoryList.Any())
        {
            SelectedCategoryId = CategoryList.First().CategoryId;
        }

        TagList = await TagRepo.GetAllTagsAsync();
    }

    private void ToggleTagSelection(int tagId, bool? isChecked)
    {
        if (isChecked == true)
        {
            if (!SelectedTagIds.Contains(tagId))
                SelectedTagIds.Add(tagId);
        }
        else
        {
            SelectedTagIds.Remove(tagId);
        }
    }

    private async Task OnSubmit()
    {
        bool confirmCreate = await JS.InvokeAsync<bool>("confirmCreate");
        if (!confirmCreate)
        {
            return; // Stop execution if user cancels
        }

        if (await NewsRepo.IsNewsArticleExistsAsync(NewsArticle.NewsArticleId))
        {
            return;
        }

        short? id = (short)await SessionStorage.GetItemAsync<int?>("AccountId");
        NewsArticle.CategoryId = SelectedCategoryId;
        NewsArticle.CreatedById = id;
        NewsArticle.UpdatedById = id;
        NewsArticle.CreatedDate = DateTime.Now;
        NewsArticle.ModifiedDate = DateTime.Now;

        var selectedTags = await TagRepo.GetTagsByIdsAsync(SelectedTagIds);
        await NewsRepo.CreateNewsArticleAsync(NewsArticle, selectedTags);

        Navigation.NavigateTo("/staff/newsarticles", forceLoad: true);
    }
    

    private void GoBack() => Navigation.NavigateTo("/staff/newsarticles");
}