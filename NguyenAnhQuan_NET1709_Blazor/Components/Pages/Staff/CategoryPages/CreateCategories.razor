@page "/staff/categorypages/create"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject ICategoryRepository CategoryRepo
@rendermode InteractiveServer
@inject IJSRuntime JS

@if (IsAuthorized)
{
    <div class="container mt-4">
        <h2 class="text-primary">Create New Category</h2>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success">@SuccessMessage</div>
        }
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <div class="card p-4">
            <form @onsubmit="CreateCategory">
                <div class="mb-3">
                    <label class="form-label fw-bold">Category Name</label>
                    <input type="text" class="form-control" @bind="Category.CategoryName" required />
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">Description</label>
                    <textarea class="form-control" @bind="Category.CategoryDesciption" rows="3" required></textarea>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">Parent Category</label>
                    <select class="form-select" @bind="Category.ParentCategoryId">
                        <option value="">-- Select Parent Category (Optional) --</option>
                        @foreach (var cat in ParentCategories)
                        {
                            <option value="@cat.CategoryId">@cat.CategoryName</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">Status</label>
                    <select class="form-select" @bind="SelectedStatus">
                        <option value="">-- Select Status --</option> <!-- Allowing null -->
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>



                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary">Create</button>
                    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
                </div>
            </form>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
@code {
    private bool IsAuthorized = false;
    private Category Category = new();
    private List<Category> ParentCategories = new();
    private string SuccessMessage = "";
    private string ErrorMessage = "";
    private bool FirstRenderCompleted = false;
    private string? SelectedStatus
    {
        get => Category.IsActive.HasValue ? Category.IsActive.Value.ToString().ToLower() : "";
        set
        {
            if (bool.TryParse(value, out var result))
            {
                Category.IsActive = result; // Convert string to bool
            }
            else
            {
                Category.IsActive = null; // Handle null properly
            }
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !FirstRenderCompleted)
        {
            FirstRenderCompleted = true;

            var accountRole = await SessionStorage.GetItemAsync<int?>("AccountRole");
            if (accountRole != 1)
            {
                Navigation.NavigateTo("/error");
                return;
            }

            IsAuthorized = true;
            await LoadParentCategories();
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadParentCategories()
    {
        var categories = await CategoryRepo.GetCategoriesNoPagiAsync();
        ParentCategories = categories.ToList();
    }

    private async Task CreateCategory()
    {
        // Show a confirmation popup
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to create this category?");
        if (!confirmed)
        {
            return; // Stop if the user cancels
        }

        try
        {
            await CategoryRepo.CreateCategoryAsync(Category);
            SuccessMessage = "Category created successfully!";
            Navigation.NavigateTo("/staff/categorypages");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private void NavigateBack() => Navigation.NavigateTo("/staff/categorypages");
}
