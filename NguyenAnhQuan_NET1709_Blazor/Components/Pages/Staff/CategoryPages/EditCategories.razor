@page "/staff/categorypages/edit/{id:int}"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject ICategoryRepository CategoryRepo
@rendermode InteractiveServer
@inject IJSRuntime JS
@if (IsAuthorized)
{
    <div class="container mt-4">
        <h2 class="mb-4 text-dark">Edit Category</h2>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success">@SuccessMessage</div>
        }
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <form class="row g-3">
            <input type="hidden" @bind="Category.CategoryId" />

            <div class="col-md-6">
                <label class="form-label fw-bold">Category Name</label>
                <input @bind="Category.CategoryName" class="form-control" required />
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Description</label>
                <textarea @bind="Category.CategoryDesciption" class="form-control" required rows="3"></textarea>
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Parent Category</label>
                <select @bind="Category.ParentCategoryId" class="form-select">
                    <option value="">-- Select Parent Category (Optional) --</option>
                    @foreach (var parent in ParentCategories)
                    {
                        <option value="@parent.CategoryId">@parent.CategoryName</option>
                    }
                </select>
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Status</label>
                <select class="form-select" @onchange="HandleStatusChange">
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                </select>


            </div>

            <div class="col-12 mt-4">
                <!-- Button to Open Modal -->
                <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#confirmModal">
                    Update
                </button>
            </div>
            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
        </form>
    </div>

    <!-- Bootstrap Confirmation Modal -->
    <!-- Bootstrap Confirmation Modal -->
    <div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true" data-bs-backdrop="false">

        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmModalLabel">Confirm Update</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to update this category?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmUpdate">Confirm</button>
                </div>
            </div>
        </div>
    </div>
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
@code {
    private bool IsAuthorized = false;
    private Category Category = new();
    private List<Category> ParentCategories = new();
    private string SuccessMessage = "";
    private string ErrorMessage = "";

    [Parameter] public int Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var accountRole = await SessionStorage.GetItemAsync<int?>("AccountRole");
            if (accountRole != 1)
            {
                Navigation.NavigateTo("/error");
                return;
            }

            IsAuthorized = true;
            await LoadCategory();
            StateHasChanged();
        }
    }
    private void NavigateBack() => Navigation.NavigateTo("/staff/categorypages");
    private async Task LoadCategory()
    {
        var categoryId = (short)Id;
        var category = await CategoryRepo.GetCategoryByIdAsync(categoryId);
        if (category == null)
        {
            Navigation.NavigateTo("/staff/categorypages");
            return;
        }

        Category = category;
        ParentCategories = await CategoryRepo.GetCategoriesNoPagiAsync();
    }

    private async Task ConfirmUpdate()
    {
        
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to update this category?");
        if (!confirmed)
        {
            return; 
        }

        try
        {
            await CategoryRepo.UpdateCategoryAsync(Category);
            SuccessMessage = "Category updated successfully!";
            Navigation.NavigateTo("/staff/categorypages"); 
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private void HandleStatusChange(ChangeEventArgs e)
    {
        Category.IsActive = bool.Parse(e.Value.ToString() ?? "false");
    }

}
