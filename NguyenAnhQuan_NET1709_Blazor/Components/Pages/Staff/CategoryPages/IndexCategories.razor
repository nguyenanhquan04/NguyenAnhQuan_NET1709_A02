@page "/staff/categorypages"
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject ICategoryRepository CategoryRepo
@rendermode InteractiveServer
@inject IJSRuntime JS
@if (IsAuthorized)
{
    <div class="container mt-4">
        <h2 class="text-primary">Category Management</h2>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success">@SuccessMessage</div>
        }
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <div class="mb-3">
            <button class="btn btn-primary" @onclick="NavigateToCreate">Create New Category</button>
        </div>

        <input type="text" @bind="SearchTerm" placeholder="Search categories..." class="form-control mb-3" />
        <button class="btn btn-secondary" @onclick="SearchCategories">Search</button>
     
        @if (Categories.Any())
        {
            <table class="table table-striped mt-3">
                <thead>
                    <tr>
                        <th>Category Id</th>
                        <th>Category Name</th>
                        <th>Description</th>
                        <th>Parent Category</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in Categories)
                    {
                        <tr>
                            <td>@category.CategoryId</td>
                            <td>@category.CategoryName</td>
                            <td>@category.CategoryDesciption</td>
                            <td>@(category.ParentCategoryId?.ToString() ?? "N/A")</td>
                            <td>@(category.IsActive == true ? "Active" : "Inactive")</td>

                            <td>
                                <button class="btn btn-warning btn-sm" @onclick="() => NavigateToEdit(category.CategoryId)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No categories found.</p>
        }

        @if (TotalPages > 1)
        {
            <div class="pagination mt-3">
                <button class="btn btn-outline-primary mx-1"
                        @onclick="() => LoadCategories(1)"
                        disabled="@(PageNumber == 1)">
                    « First
                </button>

                <button class="btn btn-outline-primary mx-1"
                        @onclick="() => LoadCategories(PageNumber - 1)"
                        disabled="@(PageNumber == 1)">
                    ‹ Prev
                </button>

                @for (int i = 1; i <= TotalPages; i++)
                {
                    <button class="btn @(i == PageNumber ? "btn-primary" : "btn-outline-primary") mx-1"
                            @onclick="@(async () => await LoadCategories(i))">
                        @i
                    </button>
                }

                <button class="btn btn-outline-primary mx-1"
                        @onclick="() => LoadCategories(PageNumber + 1)"
                        disabled="@(PageNumber == TotalPages)">
                    Next ›
                </button>

                <button class="btn btn-outline-primary mx-1"
                        @onclick="() => LoadCategories(TotalPages)"
                        disabled="@(PageNumber == TotalPages)">
                    Last »
                </button>
            </div>
        }
    </div>
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
<button class="btn btn-secondary mb-3" @onclick="NavigateBack">
    <i class="bi bi-arrow-left"></i> Back to Naviage
</button>
@code {
    private bool IsAuthorized = false;
    private List<Category> Categories = new();
    private string SearchTerm = "";
    private int PageNumber = 1;
    private int TotalPages = 1;
    private string SuccessMessage = "";
    private string ErrorMessage = "";
    private int PageSize = 4;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsAuthorized)
        {
            var accountRole = await SessionStorage.GetItemAsync<int?>("AccountRole");
            if (accountRole != 1)
            {
                NavigateTo("/error");
            }
            else
            {
                IsAuthorized = true;
                await LoadCategories(PageNumber);
                StateHasChanged();
            }
        }
    }
  
    private async Task LoadCategories(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > TotalPages) return; // Prevent invalid pages

        PageNumber = pageNumber;

        var result = string.IsNullOrWhiteSpace(SearchTerm)
            ? await CategoryRepo.GetAllCategoriesAsync(PageNumber, PageSize)
            : await CategoryRepo.SearchCategoriesAsync(SearchTerm, PageNumber, PageSize);

        Categories = result.Categories;
        TotalPages = result.TotalPages;

        StateHasChanged(); // Ensure UI updates
    }

    private async Task SearchCategories()
    {
        await LoadCategories(1);
    }

    private async Task DeleteCategory(short id)
    {
       
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?");
        if (!confirmed)
        {
            return; 
        }

        var result = await CategoryRepo.DeleteCategoryAsync(id);
        if (result)
        {
            SuccessMessage = "Category deleted successfully.";
        }
        else
        {
            ErrorMessage = "Cannot delete category because it is associated with news articles.";
        }

        await LoadCategories(PageNumber > TotalPages ? TotalPages : PageNumber);
    }
    private void NavigateBack()
    {
        Navigation.NavigateTo("/staff");
    }
    private void NavigateToCreate() => Navigation.NavigateTo("/staff/categorypages/create");
    private void NavigateToEdit(short id) => Navigation.NavigateTo($"/staff/categorypages/edit/{id}");
    private void NavigateTo(string url) => Navigation.NavigateTo(url);
}
