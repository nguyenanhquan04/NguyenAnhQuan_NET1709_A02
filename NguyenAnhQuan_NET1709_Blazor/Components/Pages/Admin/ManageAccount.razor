@page "/admin/manageaccount"
@inject ISystemAccountRepository Repo
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@rendermode InteractiveServer

<div class="container my-5">
    <h1 class="mb-4 text-center text-primary">Manage Accounts</h1>

    <div class="d-flex gap-2 mb-4 align-items-center">
        <input class="form-control w-50" @bind="SearchTerm" @bind:event="oninput" placeholder="Search by Email" />
        <button @onclick="SearchAccounts" class="btn btn-primary">
            <i class="bi bi-search"></i> Search
        </button>
        <button @onclick="@(() => NavigateToCreatePage())" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Create New Account
        </button>
        <button @onclick="@(() => NavigateToReportPage())" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> News Report
        </button>
    </div>

    @if (Accounts != null && Accounts.Any())
    {
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-hover align-middle table-bordered">
                <thead class="table-dark text-center">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var account in Accounts)
                    {
                        <tr>
                            <td class="text-center">@account.AccountId</td>
                            <td>@account.AccountName</td>
                            <td>@account.AccountEmail</td>
                            <td class="text-center">
                                @(account.AccountRole == 1 ? "Staff" :
                                    "Lecturer")
                            </td>
                            <td class="text-center">
                                <div class="d-flex justify-content-center gap-2">
                                    <button @onclick="@(() => NavigateToEditPage(account.AccountId))"
                                            class="btn btn-warning btn-sm">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </button>

                                    <button @onclick="@(() => ConfirmDelete(account.AccountId))"
                                            class="btn btn-danger btn-sm">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>

                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p class="text-center text-muted mt-4">No accounts found.</p>
    }
</div>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
@code {
    private bool isAdmin;
    private List<SystemAccount> Accounts { get; set; } = new();
    private string SearchTerm { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }

    private async Task ConfirmDelete(short id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this account?");
        if (confirmed)
        {
            await DeleteAccount(id);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAdmin = await IsAdminAsync();
            if (!isAdmin)
            {
                Navigation.NavigateTo("/error");
            }
            StateHasChanged();
        }
    }

    private void NavigateToEditPage(int accountId)
    {
        Navigation.NavigateTo($"/admin/updateaccount/{accountId}");
    }

    private void NavigateToCreatePage()
    {
        Navigation.NavigateTo($"/admin/createaccount");
    }
    private void NavigateToReportPage()
    {
        Navigation.NavigateTo($"/admin/report");
    }
    private async Task SearchAccounts()
    {
        if (!await IsAdminAsync())
        {
            Navigation.NavigateTo("/error");
            return;
        }
        Accounts = string.IsNullOrEmpty(SearchTerm)
            ? await Repo.GetAllAccountsAsync()
            : await Repo.SearchAccountsAsync(SearchTerm);
    }

    private async Task DeleteAccount(short id)
    {
        if (!await IsAdminAsync())
        {
            Navigation.NavigateTo("/error");
            return;
        }
        await Repo.DeleteAccountAsync(id);
        await SearchAccounts();
    }

    private async Task<bool> IsAdminAsync()
    {
        var role = await SessionStorage.GetItemAsStringAsync("AccountRole");
        return role == "0";
    }
}