@page "/admin/createaccount"
@inject ISystemAccountRepository Repo
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<div class="container my-5">
    <h1 class="mb-4 text-center">Create Account</h1>

    <a @onclick="NavigateToManageAccounts" class="btn btn-success mb-3">Back</a>

    <EditForm Model="@Account" OnValidSubmit="CreateAccountAsync" FormName="CreateForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Account Id:</label>
            <InputNumber @bind-Value="Account.AccountId" class="form-control" Min="1" required />
            <ValidationMessage For="@(() => Account.AccountId)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Account Name:</label>
            <InputText @bind-Value="Account.AccountName" class="form-control" required />
            <ValidationMessage For="@(() => Account.AccountName)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="Account.AccountEmail" type="email" class="form-control" required />
            <ValidationMessage For="@(() => Account.AccountEmail)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText @bind-Value="Account.AccountPassword" type="password" class="form-control" required />
            <ValidationMessage For="@(() => Account.AccountPassword)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Role:</label>
            <InputSelect @bind-Value="Account.AccountRole" class="form-control" required>
                <option value="1">Staff</option>
                <option value="2">Lecturer</option>
            </InputSelect>
            <ValidationMessage For="@(() => Account.AccountRole)" class="text-danger" />
        </div>

        <div class="form-group mt-3">
            <button type="submit" class="btn btn-success" @onclick="ConfirmCreate">
                Create
            </button>
            <button type="button" class="btn btn-secondary" @onclick="NavigateToManageAccounts">
                Cancel
            </button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</div>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
@code {
    private SystemAccount Account { get; set; } = new SystemAccount();
    private string? ErrorMessage { get; set; }
    private bool IsAdmin { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var accountRole = await SessionStorage.GetItemAsStringAsync("AccountRole");
                IsAdmin = accountRole == "0";

                if (!IsAdmin)
                {
                    Navigation.NavigateTo("/error");
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = "An error occurred while checking permissions: " + ex.Message;
            }

            StateHasChanged(); 
        }
    }

    private async Task ConfirmCreate()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to create this account?");
        if (confirmed)
        {
            await CreateAccountAsync();
        }
    }

    private async Task CreateAccountAsync()
    {
        try
        {
            var accountExists = await Repo.AccountExistsAsync(Account.AccountId);
            if (accountExists)
            {
                ErrorMessage = "There is already an account with that ID.";
                return;
            }

            await Repo.CreateAccountAsync(Account);
            Navigation.NavigateTo("/admin/manageaccount");
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error creating account: " + ex.Message;
        }
    }

    private void NavigateToManageAccounts()
    {
        Navigation.NavigateTo("/admin/manageaccount");
    }
}