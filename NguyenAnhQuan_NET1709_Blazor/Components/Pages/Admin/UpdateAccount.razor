@page "/admin/updateaccount/{id:int}"
@inject ISystemAccountRepository Repo
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<div class="container my-5">
    <h1 class="mb-4 text-center">Update Account</h1>

    <EditForm Model="@Account" OnValidSubmit="UpdateAccountAsync" FormName="UpdateForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <input type="hidden" @bind="Account.AccountId" />

        <div class="form-group">
            <label>Account Name:</label>
            <InputText @bind-Value="Account.AccountName" class="form-control" required />
            <ValidationMessage For="@(() => Account.AccountName)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="Account.AccountEmail" type="email" class="form-control" required />
            <ValidationMessage For="@(() => Account.AccountEmail)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Role:</label>
            <InputSelect @bind-Value="Account.AccountRole" class="form-control" required>
                <option value="1">Staff</option>
                <option value="2">Lecturer</option>
            </InputSelect>
            <ValidationMessage For="@(() => Account.AccountRole)" class="text-danger" />
        </div>

        <div class="form-group mt-3">
            <button type="button" class="btn btn-warning" @onclick="ConfirmUpdate">
                Update
            </button>

            <button type="button" class="btn btn-secondary" @onclick="NavigateToManageAccounts">
                Cancel
            </button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</div>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
@code {
    [Parameter]
    public int Id { get; set; }

    private SystemAccount Account { get; set; } = new SystemAccount(); // Always initialize with a default object
    private string? ErrorMessage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var isAdmin = await IsAdminAsync();
                if (!isAdmin)
                {
                    Navigation.NavigateTo("/error");
                    return;
                }

                var existingAccount = await Repo.GetAccountById((short)Id);
                if (existingAccount == null)
                {
                    ErrorMessage = "Account not found.";
                    Navigation.NavigateTo("/admin/manageaccount");
                }
                else
                {
                    Account = existingAccount;
                }

                StateHasChanged(); // Trigger a re-render after loading data
            }
            catch (Exception ex)
            {
                ErrorMessage = "An error occurred while loading the account details: " + ex.Message;
            }
        }
    }

    private async Task ConfirmUpdate()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to update this account?");
        if (confirmed)
        {
            await UpdateAccountAsync();
        }
        StateHasChanged();
    }

    private async Task UpdateAccountAsync()
    {
        try
        {
            await Repo.UpdateAccountAsync(Account);
            Navigation.NavigateTo("/admin/manageaccount");
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error updating account: " + ex.Message;
        }
    }

    private void NavigateToManageAccounts()
    {
        Navigation.NavigateTo("/admin/manageaccount");
    }

    private async Task<bool> IsAdminAsync()
    {
        var role = await SessionStorage.GetItemAsStringAsync("AccountRole");
        return role == "0";
    }
}