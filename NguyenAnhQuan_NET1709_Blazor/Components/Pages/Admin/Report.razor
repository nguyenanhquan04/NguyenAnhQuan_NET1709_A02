@page "/admin/report"
@inject INewsArticleRepository NewsArticleRepository
@inject ISystemAccountRepository AccountRepository
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@rendermode InteractiveServer
<div class="container my-5">
    <h1 class="mb-4 text-center text-primary">Report by Date Range</h1>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    <EditForm Model="@this" OnValidSubmit="GenerateReport" FormName="ReportForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Start Date:</label>
            <InputDate @bind-Value="StartDate" class="form-control" />
            <ValidationMessage For="@(() => StartDate)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>End Date:</label>
            <InputDate @bind-Value="EndDate" class="form-control" />
            <ValidationMessage For="@(() => EndDate)" class="text-danger" />
        </div>
        <button type="button" class="btn btn-secondary" @onclick="NavigateToManageAccounts">
            Back
        </button>
        <button type="submit" class="btn btn-primary mt-3">Generate Report</button>
    </EditForm>

    @if (NewsArticles != null && NewsArticles.Any())
    {
        <h2 class="mt-5">Report Results</h2>
        <div class="table-responsive">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Id</th>
                        <th>Title</th>
                        <th>Headline</th>
                        <th>Created Date</th>
                        <th>Created By</th>
                        <th>Modified Date</th>
                        <th>Updated By</th>
                        <th>Category Name</th>
                        <th>News Status</th>
                        <th>News Source</th>
                        <th>Tags</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var article in NewsArticles)
                    {
                        <tr>
                            <td>@article.NewsArticleId</td>
                            <td>@article.NewsTitle</td>
                            <td>@article.Headline</td>
                            <td>@article.CreatedDate?.ToString("yyyy-MM-dd")</td>
                            <td>@article.CreatedBy?.AccountName</td>
                            <td>@article.ModifiedDate?.ToString("yyyy-MM-dd")</td>
                            <td>
                                @(article.UpdatedById.HasValue && UpdatedByNames.ContainsKey(article.UpdatedById.Value)
                                    ? UpdatedByNames[article.UpdatedById.Value]
                                    : "Unknown")
                            </td>

                            <td>@article.Category?.CategoryName</td>
                            <td>@(article.NewsStatus == true ? "Active" : "Inactive")</td>
                            <td>@article.NewsSource</td>
                            <td>
                                @if (article.Tags.Any())
                                {
                                    @foreach (var tag in article.Tags)
                                    {
                                        <span class="badge bg-primary">@tag.TagName</span>
                                    }
                                }
                                else
                                {
                                    <span class="text-muted">No tags available</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
@code {
    private DateTime StartDate { get; set; } = DateTime.Today.AddDays(-7);
    private DateTime EndDate { get; set; } = DateTime.Today;
    private List<NewsArticle> NewsArticles { get; set; } = new();
    private Dictionary<short, string> UpdatedByNames { get; set; } = new();
    private string? ErrorMessage { get; set; }
    private bool IsAdmin { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var accountRole = await SessionStorage.GetItemAsStringAsync("AccountRole");
                IsAdmin = accountRole == "0";

                if (!IsAdmin)
                {
                    Navigation.NavigateTo("/error");
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = "An error occurred while checking permissions: " + ex.Message;
            }

            StateHasChanged();
        }
    }
    private void NavigateToManageAccounts()
    {
        Navigation.NavigateTo("/admin/manageaccount");
    }
    private async Task GenerateReport()
    {
        if (StartDate > EndDate)
        {
            ErrorMessage = "Start Date cannot be later than End Date.";
            return;
        }

        try
        {
            NewsArticles = await NewsArticleRepository.GetNewsArticlesByDateRangeAsync(StartDate, EndDate);

            if (NewsArticles == null || !NewsArticles.Any())
            {
                ErrorMessage = "No articles found for the selected date range.";
                return;
            }

            ErrorMessage = null;

            var updatedByIds = NewsArticles
                .Where(a => a.UpdatedById.HasValue)
                .Select(a => a.UpdatedById.Value)
                .Distinct()
                .ToList();

            foreach (var id in updatedByIds)
            {
                var account = await AccountRepository.GetAccountById(id);
                UpdatedByNames[id] = account?.AccountName ?? "Unknown";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred while generating the report: " + ex.Message;
        }
    }
}